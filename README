# precisewakeup
日常工作中常遇到这样的任务需求:
1，当一个用户连续五天没有登录APP则发送短信唤醒；
2，当一个用户发布过一条职位后12小时内没有人响应，则系统为其推送几个；

一般遇到这种需求,都会去定时跑任务,比如说早晨10点跑一次,下午4点跑一次,这样做会有很大的问题：
1,时间上不准确，10:05的动作要到下一个任务的4点时再能触发；
2,对连续5天这样的判断并不容易；
3,批量跑出的数据可能会很大，然后对这些数据的处理会占用很大的资源；

基于以上考虑，就有了对此类任务做一次技术重构的打算，计划实现这样的目标：
1,一个用户在5天前的12:31登录过app，那么在用户连续5天没有再次登录时，会在12:31向用户发起一个唤醒动作如短信；
2,当一个用户在5天前的12:31登录过app,在3天前的15:12又登录了一次，那么在2天后的15:12之间如果用户一直没有登录，则会唤醒；
3,所有待唤醒的对象都像MQ中的消息一样等待消费，只不过消息可以被主动的删除或替换掉 ；

为实现上述功能，在开发时做了以下的技术选择：
1,借助并发的DelaydQueue,为所有实现了Delayd接口的对象实现阻塞获取处理；
2,所有数据存放在本地的文本数据库MapDB中，以便在应用停止时恢复所有还未被消费的数据；
3,每一类的消息都有固定的topic,下面又分为多个subTopic,以方便对消息处理的量进行成倍的性能提升；
4,提供了一个websocket接口，可以在浏览器端实时观察到正在处理的数据.


